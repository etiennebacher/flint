id: redundant_ifelse_1
language: r
severity: warning
rule:
  any:
    - pattern: ifelse($COND, $VAL1, $VAL2)
    - pattern: if_else($COND, $VAL1, $VAL2)
    - pattern: fifelse($COND, $VAL1, $VAL2)
constraints:
  VAL1:
    regex: ^TRUE$
  VAL2:
    regex: ^FALSE$
fix: ~~COND~~
message: |
  Just use the logical condition (or its negation) directly instead
  of calling ifelse(x, TRUE, FALSE).

---

id: redundant_ifelse_2
language: r
severity: warning
rule:
  any:
    - pattern: ifelse($COND, $VAL1, $VAL2)
    - pattern: if_else($COND, $VAL1, $VAL2)
    - pattern: fifelse($COND, $VAL1, $VAL2)
constraints:
  VAL1:
    regex: ^FALSE$
  VAL2:
    regex: ^TRUE$
fix: !~~COND~~
message: |
  Just use the logical condition (or its negation) directly instead
  of calling ifelse(x, TRUE, FALSE).

---

id: redundant_ifelse_3
language: r
severity: warning
rule:
  any:
    - pattern: ifelse($COND, $VAL1, $VAL2)
    - pattern: if_else($COND, $VAL1, $VAL2)
    - pattern: fifelse($COND, $VAL1, $VAL2)
constraints:
  VAL1:
    regex: ^(1|1L)$
  VAL2:
    regex: ^(0|0L)$
fix: as.integer(~~COND~~)
message: Prefer as.integer(x) to ifelse(x, 1L, 0L) if really needed.

---

id: redundant_ifelse_4
language: r
severity: warning
rule:
  any:
    - pattern: ifelse($COND, $VAL1, $VAL2)
    - pattern: if_else($COND, $VAL1, $VAL2)
    - pattern: fifelse($COND, $VAL1, $VAL2)
constraints:
  VAL1:
    regex: ^(0|0L)$
  VAL2:
    regex: ^(1|1L)$
fix: as.integer(!~~COND~~)
message: Prefer as.integer(!x) to ifelse(x, 0L, 1L) if really needed.
